import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { motion } from "framer-motion";
import { Plus, Trash } from "lucide-react";

const CorporateAccountForm = () => {
  const { register, setValue, watch } = useForm();
  const [nameInputs, setNameInputs] = useState<string[]>([""]);

  // Add new input field dynamically
  const addInput = () => {
    setNameInputs((prev) => [...prev, ""]);
  };

  // Remove an input field dynamically
  const removeInput = (index: number) => {
    setNameInputs((prev) => prev.filter((_, i) => i !== index));
    // Update form values to reflect removed input
    setValue(
      "corporateAccount.corporateaccountnames",
      watch("corporateAccount.corporateaccountnames")?.filter(
        (_, i) => i !== index
      ) ?? []
    );
  };

  return (
    <div>
      <p className="md:text-[24px] text-[18px] text-[#692371] font-[600] mb-4 uppercase">
        <span>8 </span> For Corporate Account
      </p>

      {/* Dynamic Inputs */}
      <div>
        {nameInputs.map((_, index) => (
          <motion.div
            key={index}
            className="lg:flex items-center mt-3 gap-3"
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
            transition={{ duration: 0.3 }}
          >
            <label className="text-[18px] font-[400]">
              Name {index + 1}:
            </label>
            <input
              type="text"
              placeholder={`Enter name ${index + 1}`}
              className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
              {...register(`corporateAccount.corporateaccountnames.${index}`)}
            />
            {index > 0 && (
              <button
                type="button"
                className="p-2 text-white bg-red-500 rounded-md hover:bg-red-600"
                onClick={() => removeInput(index)}
              >
                <Trash size={18} />
              </button>
            )}
          </motion.div>
        ))}

        {/* Add Input Button */}
        <button
          type="button"
          onClick={addInput}
          className="mt-4 flex items-center gap-2 px-4 py-2 bg-[#692371] text-white rounded-md hover:bg-[#501c56]"
        >
          <Plus size={18} />
          Add Name
        </button>
      </div>
    </div>
  );
};

export default CorporateAccountForm;
//////
//////
/////
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { motion } from "framer-motion";
import { Plus, Trash } from "lucide-react";

type FormData = {
  corporateAccount: {
    corporateaccountnames: string[];
  };
};

const CorporateAccountForm = () => {
  const { register, handleSubmit, setValue, watch } = useForm<FormData>({
    defaultValues: {
      corporateAccount: {
        corporateaccountnames: [""],
      },
    },
  });

  const names = watch("corporateAccount.corporateaccountnames");

  const addInput = () => {
    // Add an empty string to the array in `react-hook-form`
    setValue(
      "corporateAccount.corporateaccountnames",
      [...names, ""]
    );
  };

  const removeInput = (index: number) => {
    // Remove an input field and update the state
    const updatedNames = names.filter((_, i) => i !== index);
    setValue("corporateAccount.corporateaccountnames", updatedNames);
  };

  const onSubmit = (data: FormData) => {
    console.log("Submitted Data:", data);
    // Submit the data to your backend here
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <p className="md:text-[24px] text-[18px] text-[#692371] font-[600] mb-4 uppercase">
        <span>8 </span> For Corporate Account
      </p>

      {/* Dynamic Inputs */}
      <div>
        {names.map((_, index) => (
          <motion.div
            key={index}
            className="lg:flex items-center mt-3 gap-3"
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
            transition={{ duration: 0.3 }}
          >
            <label className="text-[18px] font-[400]">
              Name {index + 1}:
            </label>
            <input
              type="text"
              placeholder={`Enter name ${index + 1}`}
              className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
              {...register(`corporateAccount.corporateaccountnames.${index}`)}
            />
            {index > 0 && (
              <button
                type="button"
                className="p-2 text-white bg-red-500 rounded-md hover:bg-red-600"
                onClick={() => removeInput(index)}
              >
                <Trash size={18} />
              </button>
            )}
          </motion.div>
        ))}

        {/* Add Input Button */}
        <button
          type="button"
          onClick={addInput}
          className="mt-4 flex items-center gap-2 px-4 py-2 bg-[#692371] text-white rounded-md hover:bg-[#501c56]"
        >
          <Plus size={18} />
          Add Name
        </button>
      </div>

      {/* Submit Button */}
      <button
        type="submit"
        className="mt-6 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
      >
        Submit
      </button>
    </form>
  );
};

export default CorporateAccountForm;
////
///
import React from "react";
import { useForm, useFieldArray } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { motion } from "framer-motion";
import { Trash2, Plus } from "lucide-react";

// Define Zod Schema
const schema = z.object({
  corporateAccount: z.object({
    corporateaccountnames: z
      .array(z.string().nonempty("Names are required"))
      .optional(),
  }),
});

type FormData = z.infer<typeof schema>;

const CorporateAccountForm: React.FC = () => {
  const { control, register, handleSubmit } = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: {
      corporateAccount: {
        corporateaccountnames: [""], // Initialize with one input field
      },
    },
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "corporateAccount.corporateaccountnames",
  });

  const onSubmit = (data: FormData) => {
    console.log("Form Data Submitted:", data);
  };

  return (
    <div className="p-5 bg-gray-100 min-h-screen">
      <form
        onSubmit={handleSubmit(onSubmit)}
        className="space-y-5 bg-white p-5 rounded-md shadow-md max-w-2xl mx-auto"
      >
        <p className="text-[24px] font-bold text-[#692371] uppercase">
          Corporate Account
        </p>

        <div className="space-y-4">
          {fields.map((field, index) => (
            <motion.div
              key={field.id}
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              transition={{ duration: 0.3 }}
              className="flex items-center gap-3"
            >
              <input
                type="text"
                placeholder={`Enter Name ${index + 1}`}
                className="flex-1 px-3 py-2 border border-gray-400 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                {...register(`corporateAccount.corporateaccountnames.${index}`)}
              />
              {fields.length > 1 && (
                <button
                  type="button"
                  className="p-2 text-red-600 hover:bg-red-100 rounded-md"
                  onClick={() => remove(index)}
                >
                  <Trash2 size={20} />
                </button>
              )}
            </motion.div>
          ))}
        </div>

        <button
          type="button"
          onClick={() => append("")}
          className="flex items-center gap-2 px-4 py-2 text-white bg-[#692371] rounded-md hover:bg-[#531b57]"
        >
          <Plus size={20} />
          Add Name
        </button>

        <div className="mt-5">
          <button
            type="submit"
            className="w-full px-4 py-2 text-white bg-green-600 rounded-md hover:bg-green-700"
          >
            Submit
          </button>
        </div>
      </form>
    </div>
  );
};

export default CorporateAccountForm;
//// 
worked
//////
import React, { useState } from "react";

const CorporateAccountForm = () => {
  interface Signatory {
    names: string;
    signature: FileList | null;
    designation: string;
    category: string;
  }

  const [signatories, setSignatories] = useState<Signatory[]>([
    { names: "", signature: null, designation: "", category: "" },
  ]);

  const handleInputChange = (
    index: number,
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const { name, value, files } = event.target;
    const newSignatories = [...signatories];
    if (name === "signature") {
      newSignatories[index][name as keyof Signatory] = files as any;
    } else {
      newSignatories[index][name as keyof Signatory] = value as any;
    }
    setSignatories(newSignatories);
  };

  const handleAddSignatory = () => {
    setSignatories([
      ...signatories,
      { names: "", signature: null, designation: "", category: "" },
    ]);
  };

  const handleSubmit = (event: any) => {
    event.preventDefault();
    console.log(signatories);
    // Handle the submission logic here (e.g., send the data to the backend)
  };

  return (
    <form onSubmit={handleSubmit}>
      {signatories.map((signatory, index) => (
        <div key={index} className="mt-10">
          <p className="md:text-[24px] text-[18px] text-[#692371] font-[600] mb-4 uppercase">
            <span>{index + 1} </span> For Corporate Account
          </p>
          <div>
            <div className="lg:flex items-center mt-3">
              <p className="text-[18px] font-[600] mb-4 uppercase">
                Signatory {index + 1}
              </p>
              <label className="text-[18px] font-[400]">Names :</label>
              <input
                type="text"
                placeholder="John Doe, Willy Jonathan, Andrew James etc.."
                className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                name="names"
                value={signatory.names}
                onChange={(event) => handleInputChange(index, event)}
              />
            </div>
            <div className="lg:flex items-center mt-3 gap-3">
              <label className="w-[12%] text-[18px] font-[400]">
                Signature :
              </label>
              <div className="flex items-center gap-5">
                <input
                  type="file"
                  placeholder="upload your Signature"
                  className="mt-1 block w-full px-3 py-2 border border-gray-500 accent-[#692371] rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                  name="signature"
                  onChange={(event) => handleInputChange(index, event)}
                />
              </div>
            </div>
            <div className="lg:flex items-center mt-3">
              <label className="text-[18px] font-[400]">Designation:</label>
              <input
                type="text"
                placeholder="Account Officer, Manager, Secretary etc.."
                className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                name="designation"
                value={signatory.designation}
                onChange={(event) => handleInputChange(index, event)}
              />
            </div>
            <div className="lg:flex items-center mt-3">
              <label className="text-[18px] font-[400]">Category :</label>
              <input
                type="text"
                placeholder="A, B, C etc.."
                className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                name="category"
                value={signatory.category}
                onChange={(event) => handleInputChange(index, event)}
              />
            </div>
          </div>
        </div>
      ))}
      <button
        type="button"
        onClick={handleAddSignatory}
        className="mt-5 px-4 py-2 bg-[#692371] text-white rounded-md"
      >
        Add Signatory
      </button>
      <button
        type="submit"
        className="mt-5 ml-3 px-4 py-2 bg-[#692371] text-white rounded-md"
      >
        Submit
      </button>
    </form>
  );
};

export default CorporateAccountForm;
////
worked 
////////////////////////////////
"use client";
import { useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";

type Signatory = {
  name: string;
  signature: FileList | null;
  designation: string;
  category: string;
};

type CorporateAccountForm = {
  corporateAccount: {
    signatories: Signatory[];
  };
};

export default function CorporateAccountForm() {
  const { register, handleSubmit, watch } = useForm<CorporateAccountForm>({
    defaultValues: {
      corporateAccount: {
        signatories: [
          { name: "", signature: null, designation: "", category: "" },
        ],
      },
    },
  });
  const [signatories, setSignatories] = useState<Signatory[]>([
    { name: "", signature: null, designation: "", category: "" },
  ]);

  const addSignatory = () => {
    setSignatories([
      ...signatories,
      { name: "", signature: null, designation: "", category: "" },
    ]);
  };

  const removeSignatory = (index: number) => {
    setSignatories(signatories.filter((_, i) => i !== index));
  };

  const handleInputChange = (
    index: number,
    field: keyof Signatory,
    value: string | FileList | null
  ) => {
    const updatedSignatories = signatories.map((signatory, i) =>
      i === index ? { ...signatory, [field]: value } : signatory
    );
    setSignatories(updatedSignatories);
  };

  const onSubmit: SubmitHandler<CorporateAccountForm> = (data) => {
    console.log({ ...data, signatories });
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div className="mt-10">
        <p className="md:text-[24px] text-[18px] text-[#692371] font-[600] mb-4 uppercase">
          <span>{signatories.length} </span> For Corporate Account
        </p>

        {signatories.map((signatory, index) => (
          <div key={index} className="mb-6 border p-4 rounded-md">
            <div className="flex justify-between items-center mb-2">
              <p className="text-[18px] font-[600] uppercase">
                Signatory {index + 1}
              </p>
              {index > 0 && (
                <button
                  type="button"
                  className="text-red-500 font-bold"
                  onClick={() => removeSignatory(index)}
                >
                  Remove
                </button>
              )}
            </div>

            <div className="lg:flex items-center mt-3 gap-3">
              <label className="text-[18px] font-[400]">Name :</label>
              <input
                type="text"
                placeholder="John Doe, Willy Jonathan, Andrew James etc.."
                className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                value={signatory.name}
                onChange={(e) =>
                  handleInputChange(index, "name", e.target.value)
                }
              />
            </div>

            <div className="lg:flex items-center mt-3 gap-3">
              <label className="w-[12%] text-[18px] font-[400]">
                Signature :
              </label>
              <input
                type="file"
                multiple
                className="mt-1 block w-full px-3 py-2 border border-gray-500 accent-[#692371] rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                onChange={(e) =>
                  handleInputChange(index, "signature", e.target.files)
                }
              />
            </div>

            <div className="lg:flex items-center mt-3">
              <label className="text-[18px] font-[400]">Designation:</label>
              <input
                type="text"
                placeholder="Account Officer, Manager, Secretary etc.."
                className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                value={signatory.designation}
                onChange={(e) =>
                  handleInputChange(index, "designation", e.target.value)
                }
              />
            </div>

            <div className="lg:flex items-center mt-3">
              <label className="text-[18px] font-[400]">Category :</label>
              <input
                type="text"
                placeholder="A, B, C etc.."
                className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                value={signatory.category}
                onChange={(e) =>
                  handleInputChange(index, "category", e.target.value)
                }
              />
            </div>
          </div>
        ))}

        <button
          type="button"
          className="bg-[#692371] text-white px-4 py-2 rounded-md"
          onClick={addSignatory}
        >
          Add Signatory
        </button>

        <button
          type="submit"
          className="ml-3 bg-green-500 text-white px-4 py-2 rounded-md"
        >
          Submit
        </button>
      </div>
    </form>
  );
}


/////
worked////
////////////////////////////////////////////////////////////////
import React, { useState } from "react";
import { Plus, Trash2 } from "lucide-react";
import { useForm } from "react-hook-form";
import { motion, AnimatePresence } from "framer-motion";

const CorporateSignatories = () => {
  const { register, handleSubmit } = useForm();
  const [signatories, setSignatories] = useState([{ id: 1 }]);

  const addSignatory = () => {
    const newId = signatories.length + 1;
    setSignatories([...signatories, { id: newId }]);
  };

  const removeSignatory = (id: any) => {
    if (signatories.length > 1) {
      setSignatories(signatories.filter((sig) => sig.id !== id));
    }
  };

  const onSubmit = (data) => {
    console.log("Form Data:", data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="mt-10">
      <div className="flex items-center justify-between">
        <p className="md:text-[24px] text-[18px] text-[#692371] font-[600] mb-4 uppercase">
          <span>8 </span> For Corporate Account
        </p>
        <motion.button
          type="button"
          onClick={addSignatory}
          className="flex items-center gap-2 px-4 py-2 text-white bg-[#692371] rounded-md hover:bg-[#561d5e] transition-colors"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <Plus size={20} />
          Add Signatory
        </motion.button>
      </div>

      <AnimatePresence mode="popLayout">
        {signatories.map((signatory, index) => (
          <motion.div
            key={signatory.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className="mb-8 p-6 border border-gray-200 rounded-lg"
          >
            <div className="flex justify-between items-center mb-4">
              <p className="text-[18px] font-[600] uppercase">
                Signatory {index + 1}
              </p>
              {signatories.length > 1 && (
                <motion.button
                  type="button"
                  onClick={() => removeSignatory(signatory.id)}
                  className="text-red-500 hover:text-red-700 transition-colors"
                  title="Remove Signatory"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <Trash2 size={20} />
                </motion.button>
              )}
            </div>

            <div className="space-y-4">
              <div>
                <label className="text-[18px] font-[400] block mb-2">
                  Names:
                </label>
                <input
                  type="text"
                  placeholder="John Doe, Willy Jonathan, Andrew James etc.."
                  className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                  {...register(`corporateAccount.signatories.${index}.names`)}
                />
              </div>

              <div>
                <label className="text-[18px] font-[400] block mb-2">
                  Signature:
                </label>
                <input
                  type="file"
                  multiple
                  className="mt-1 block w-full px-3 py-2 border border-gray-500 accent-[#692371] rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                  {...register(
                    `corporateAccount.signatories.${index}.signature`
                  )}
                />
              </div>

              <div>
                <label className="text-[18px] font-[400] block mb-2">
                  Designation:
                </label>
                <input
                  type="text"
                  placeholder="Account Officer, Manager, Secretary etc.."
                  className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                  {...register(
                    `corporateAccount.signatories.${index}.designation`
                  )}
                />
              </div>

              <div>
                <label className="text-[18px] font-[400] block mb-2">
                  Category:
                </label>
                <input
                  type="text"
                  placeholder="A, B, C etc.."
                  className="mt-1 block w-full px-3 py-2 border border-gray-500 rounded-md shadow-sm focus:ring-[#692371] focus:border-[#692371] focus:outline-none"
                  {...register(
                    `corporateAccount.signatories.${index}.category`
                  )}
                />
              </div>
            </div>
          </motion.div>
        ))}
      </AnimatePresence>

      <motion.button
        type="submit"
        className="w-full mt-6 px-6 py-3 text-white bg-[#692371] rounded-md hover:bg-[#561d5e] transition-colors font-semibold"
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        Submit Corporate Account Details
      </motion.button>
    </form>
  );
};

export default CorporateSignatories;



